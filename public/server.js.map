{"version":3,"file":"server.js","mappings":"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","sources":["webpack://spyspy/./client/reducers.js","webpack://spyspy/./server/controllers/gameController.js","webpack://spyspy/./server/controllers/lobbyController.js","webpack://spyspy/./server/controllers/mainController.js","webpack://spyspy/./server/models/game.js","webpack://spyspy/./server/models/room.js","webpack://spyspy/./server/models/round.js","webpack://spyspy/./server/socket.js","webpack://spyspy/external commonjs \"@reduxjs/toolkit\"","webpack://spyspy/external commonjs \"chalk\"","webpack://spyspy/external commonjs \"express\"","webpack://spyspy/external commonjs \"randomstring\"","webpack://spyspy/external commonjs \"socket.io\"","webpack://spyspy/external commonjs \"socket.io-client\"","webpack://spyspy/external node-commonjs \"http\"","webpack://spyspy/external node-commonjs \"path\"","webpack://spyspy/webpack/bootstrap","webpack://spyspy/webpack/runtime/compat get default export","webpack://spyspy/webpack/runtime/define property getters","webpack://spyspy/webpack/runtime/hasOwnProperty shorthand","webpack://spyspy/webpack/runtime/make namespace object","webpack://spyspy/./server/server.js"],"sourcesContent":["import { configureStore, createSlice, combineReducers, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialGameState = {\r\n    players: [],\r\n    spies: [],\r\n    knights: [],\r\n    rounds: [],\r\n    leader: '',\r\n    showRoles: false,\r\n    allAcknowledged: false,\r\n    selectedPlayers: [],\r\n    currentRound: 0,\r\n    castToVote: false,\r\n    allowToVote: true,\r\n    showWinner: false,\r\n    knightsWon: false,\r\n}\r\n\r\nconst initialRoomState = {\r\n    selfId: '',\r\n    selfAlias: '',\r\n    players: [],\r\n    roomCode: null,\r\n    error: null,\r\n    gameStarted:false,\r\n}\r\n\r\nconst roomsSlice = createSlice({\r\n    name: \"room\",\r\n    initialState:initialRoomState,\r\n    reducers: {\r\n        ioCreateRoom(state,action){\r\n        },\r\n        roomCreated(state,{action,payload}){\r\n            return {...state,...payload}; \r\n        },\r\n        ioEnterRoomCode(state,{action,payload}){            \r\n        },\r\n        updatePlayers(state,{action,payload}){\r\n            return {...state, players: payload}\r\n        },\r\n        updateSelf(state,{action,payload}){\r\n            return {\r\n                ...state,\r\n                ...payload\r\n            }\r\n        },\r\n        errorOccured(state,{action,payload}){\r\n            return {\r\n                ...state,\r\n                error: payload\r\n            }\r\n        },\r\n        ioPlayerIsReady(state,{action,payload}){\r\n        },\r\n        ioStartGame(state){\r\n\r\n        },\r\n        navigateToGame(state){\r\n            return {\r\n                ...state,\r\n                gameStarted: true\r\n            }\r\n        },\r\n        returnAllRoomData(state,{action,payload}){\r\n            return {...state,...payload}\r\n        },\r\n    }\r\n});\r\n\r\nconst gameSlice = createSlice({\r\n    name:\"game\",\r\n    initialState:initialGameState,\r\n    reducers: {\r\n        updateGameState(state,{action,payload}){\r\n            return{\r\n                ...state,\r\n                ...payload\r\n            }\r\n        },\r\n        ioGetAllData(state){\r\n        },\r\n        ioPlayerAcknowledged(state){},\r\n        allPlayersAcknowledged(state,{action,payload}){\r\n            return {...state,allAcknowledged:true,showRoles:false}\r\n        },\r\n        ioUpdateSelectedPlayers(state,{action,payload}){\r\n        },\r\n        updateSelectedPlayers(state,{action,payload}){\r\n            return {...state,selectedPlayers:payload}\r\n        },\r\n        ioCastToVote(state,{action,payload}){},\r\n        updateCastToVote(state,{action,payload}){\r\n            return {...state,castToVote:payload}\r\n        },\r\n        ioPlayerCastVote(state,{action,payload}){},\r\n        updateAllowToVote(state,{action,payload}){\r\n            return {...state,allowToVote:payload}\r\n        },\r\n        showWinner(state,{action,payload}){\r\n            return {...state,showWinner:true,knightsWon:payload}\r\n        },\r\n        hideShowWinner(state,{action,payload}){\r\n            return {...state,showWinner:false}\r\n        },\r\n        resetGameState(state,{action,payload}){\r\n            return {\r\n                ...state,\r\n                leader:payload.newLeader,\r\n                selectedPlayers: [],\r\n                currentRound:payload.currentRound,\r\n                castToVote: false,\r\n                allowToVote: true,\r\n                showWinner: false,\r\n                knightsWon: false,\r\n                rounds: payload.rounds\r\n            }\r\n        }\r\n    }\r\n}\r\n);\r\n\r\n//Root reducer for usage in the store\r\nexport const rootReducer = combineReducers({\r\n    room: roomsSlice.reducer,\r\n    game: gameSlice.reducer,\r\n});\r\n\r\n//Make action creators accesible \r\n\r\nexport const {\r\n    ioCreateRoom,\r\n    roomCreated,\r\n    navigateToLobby,\r\n    ioEnterRoomCode,\r\n    updatePlayers,\r\n    updateSelf,\r\n    errorOccured,\r\n    ioPlayerIsReady,\r\n    ioStartGame,\r\n    navigateToGame,\r\n    returnAllRoomData\r\n} = roomsSlice.actions;\r\n\r\nexport const {\r\n    updateGameState,\r\n    ioGetAllData,\r\n    ioPlayerAcknowledged,\r\n    allPlayersAcknowledged,\r\n    ioUpdateSelectedPlayers,\r\n    updateSelectedPlayers,\r\n    ioCastToVote,\r\n    updateCastToVote,\r\n    ioPlayerCastVote,\r\n    updateAllowToVote,\r\n    showWinner,\r\n    hideShowWinner,\r\n    resetGameState\r\n} = gameSlice.actions;\r\n\r\n","import {Game} from '../models/game';\r\nimport Round from '../models/round';\r\n\r\nimport {\r\n    navigateToGame,\r\n} from '../../client/reducers';\r\nimport {\r\n    updateGameState,\r\n    allPlayersAcknowledged,\r\n    updateSelectedPlayers,\r\n    updateCastToVote,\r\n    updateAllowToVote,\r\n    showWinner,\r\n    hideShowWinner,\r\n    resetGameState\r\n} from '../../client/reducers';\r\nimport { io } from 'socket.io-client';\r\n\r\nexport default class GameController {\r\n    constructor(io){\r\n        this.io = io;\r\n        this.games = new Map();\r\n    }\r\n\r\n    createGame = function(room){\r\n        const game = new Game(room);\r\n        this.games.set(room.roomCode,game)\r\n        return game;\r\n    } \r\n\r\n    checkAllPlayersAcknowledged = function(roomCode){\r\n        let game = this.games.get(roomCode);\r\n        game.playersAcknowledgedRole++;\r\n        if(game.playersAcknowledgedRole === game.players.length){\r\n            this.io.in(roomCode).emit(allPlayersAcknowledged.type)\r\n        }\r\n        return game;\r\n    }\r\n\r\n    sendSelectedPlayersToRoom = function(roomCode, selectedPlayers){\r\n        this.io.in(roomCode).emit(updateSelectedPlayers.type,selectedPlayers);\r\n    }\r\n\r\n    updateCastToVote = function(roomCode, castToVote){\r\n        this.castToVote = castToVote;\r\n        this.io.in(roomCode).emit(updateCastToVote.type,castToVote);\r\n    }\r\n\r\n    getGameFromRoomcode = function(roomCode){\r\n        return this.games.get(roomCode);\r\n    }\r\n\r\n    setGameWithRoomcode = function(roomCode,game){\r\n        this.games.set(roomCode,game)\r\n    }\r\n\r\n    updatePlayerVote = function(gameToUpdate,selfId,missionPass){\r\n        let game = gameToUpdate;\r\n        missionPass ? game.rounds[game.currentRound].numberOfPass++ : game.rounds[game.currentRound].numberOfFail++;\r\n        let playerName = this.getNameFromId(game,selfId);\r\n        game.rounds[game.currentRound].playersOnMission.push(playerName);\r\n        return game;\r\n    }\r\n\r\n    checkAllPlayersVoted = function(roomCode){\r\n        const game = this.getGameFromRoomcode(roomCode)\r\n        const currentRound = game.rounds[game.currentRound]\r\n        if((currentRound.numberOfFail + currentRound.numberOfPass) === game.missionRules[game.players.length-5][game.currentRound]){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    checkIfKnightsWin = function(roomCode){\r\n        let game = this.games.get(roomCode)\r\n        let currentRound = game.rounds[game.currentRound]\r\n        //if mission fails then spies won\r\n        if(currentRound.numberOfFail>=1 && game.players.length<7){\r\n            game.rounds[game.currentRound].knightsWon = false;\r\n            this.games.set(roomCode,game)\r\n            return false;\r\n        } else if (currentRound.numberOfFail>=2 && game.players.length >= 7 ){\r\n            game.rounds[game.currentRound].knightsWon = false;\r\n            this.games.set(roomCode,game)\r\n            return false;\r\n        } else {\r\n            game.rounds[game.currentRound].knightsWon = true;\r\n            this.games.set(roomCode,game)\r\n            return true;\r\n        }\r\n    }\r\n\r\n    transitionRound = function(roomCode){\r\n        let game = this.getGameFromRoomcode(roomCode);\r\n        let knightsWon = this.checkIfKnightsWin(roomCode);\r\n        this.storeWinner(knightsWon,this.getGameFromRoomcode(roomCode)) \r\n        this.incrementRound(game);\r\n        //send something back to the front-end to show the winner \r\n        this.io.in(roomCode).emit(showWinner.type,knightsWon);\r\n        setTimeout(()=>{\r\n            //wait 30 seconds and then\r\n            // hide the winners \r\n            this.io.in(roomCode).emit(hideShowWinner.type);\r\n            this.io.in(roomCode).emit(resetGameState.type,{rounds:game.rounds,currentRound:game.currentRound,newLeader:game.leader});\r\n        },10000)\r\n            \r\n            // increment the round and reset what needs to be reset\r\n    }\r\n\r\n    //need to add a new blank round\r\n    //set game.currentRound++\r\n    //game.selectedPlayers back to []\r\n    //game.leader = ''\r\n    //\r\n\r\n    storeWinner = function(knightsWin,game){\r\n        let updatedGame = game; \r\n        updatedGame.rounds[game.currentRound].knightsWon = knightsWin;\r\n        this.setGameWithRoomcode(updatedGame.roomCode, updatedGame);\r\n    }\r\n\r\n    incrementRound = function(game){\r\n        let updatedGame = game; \r\n        updatedGame.currentRound++;\r\n        updatedGame.leader = updatedGame.incrementMissionLeader(updatedGame.players,updatedGame.leader);\r\n        this.setGameWithRoomcode(updatedGame.roomCode,updatedGame);\r\n    }\r\n\r\n    //works under the assumption that player names will not be the same\r\n    getNameFromId = (game,providedSelfId) => {\r\n        let playerName = game.players.filter((player)=>{\r\n            return player.playerId===providedSelfId\r\n        })\r\n        if(playerName[0]){\r\n            return playerName[0].selfAlias;\r\n        } else {\r\n            return null;\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport const communicateStartOfGame = (io, toRoom, game) => {\r\n    io.in(toRoom).emit(navigateToGame.type);\r\n    io.in(toRoom).emit(updateGameState.type,game);\r\n}\r\n\r\nexport const communicatePlayerCantVote = (io,selfId) => {\r\n    io.to(selfId).emit(updateAllowToVote.type,false)\r\n}\r\n\r\n\r\n","import {\r\n    roomCreated,\r\n    updatePlayers,\r\n    updateSelf,\r\n    errorOccured,\r\n    returnAllRoomData\r\n} from '../../client/reducers';\r\n\r\nimport { Room } from '../models/room';\r\nimport chalk from 'chalk';\r\n\r\n// one instance is made on server start up\r\nexport default class LobbyController{\r\n\r\n    constructor(io){\r\n        this.io=io;\r\n        this.rooms = new Map();\r\n        this.playersToRooms = new Map();\r\n    }\r\n\r\n    createRoom = function(playerId){\r\n        const newRoom = new Room(playerId);\r\n        this.addToRoomMap(newRoom);\r\n        this.addPlayerToRoomMap(newRoom,playerId);\r\n        this.io.to(playerId).emit(roomCreated.type,this.formattedRoom(newRoom,playerId));\r\n        return newRoom.roomCode\r\n    }\r\n\r\n    joinRoom = function(enteredRoomCode,socket){\r\n        if(this.checkRoomExists(enteredRoomCode)){\r\n            if(!this.roomIsFull(enteredRoomCode)){\r\n                socket.join(enteredRoomCode);\r\n                const room = this.rooms.get(enteredRoomCode)\r\n                this.addPlayerToRoomMap(room,socket.id)\r\n                const players = this.addPlayerToRoom(enteredRoomCode,socket.id)\r\n                //update this players state \r\n                this.io.to(socket.id).emit(updateSelf.type,this.formattedPlayer(enteredRoomCode,players,socket.id));\r\n                //update all players state with the list of players\r\n                this.io.in(enteredRoomCode).emit(updatePlayers.type,players);\r\n            } else {\r\n                this.io.to(socket.id).emit(errorOccured.type,'roomIsFull');\r\n            }\r\n        } else{\r\n            \r\n        }          \r\n    }\r\n\r\n    playerLeft = function(playerId){\r\n        try{\r\n            this.removePlayerFromRoom(playerId)\r\n        } catch(error){\r\n            console.log(chalk.red('an error occured trying to remove a player from their room'));\r\n            console.log(error);\r\n        }  \r\n    }\r\n\r\n    addToRoomMap = function(newRoom){\r\n        return this.rooms.set(newRoom.roomCode,newRoom);\r\n    }\r\n\r\n    addPlayerToRoomMap = function(newRoom,playerId){\r\n        return this.playersToRooms.set(playerId,newRoom.roomCode);\r\n    }\r\n\r\n    formattedRoom = function(newRoom,playerId){\r\n        return {\r\n            roomCode: newRoom.roomCode,\r\n            selfId: playerId,\r\n            selfAlias: newRoom.players[0].selfAlias,\r\n            players: newRoom.players\r\n        }\r\n    }\r\n\r\n    formattedPlayer = function(roomCode, playersArray,playerId){\r\n\r\n        const selfAlias = playersArray.filter((player)=>{\r\n            return player.selfId === playerId\r\n        }).selfAlias\r\n\r\n        return {\r\n            roomCode: roomCode, \r\n            selfId: playerId,\r\n            selfAlias\r\n        }\r\n    }\r\n\r\n    checkRoomExists(enteredCode){\r\n        return this.rooms.has(enteredCode)\r\n    }\r\n\r\n    addPlayerToRoom(enteredRoomCode, player){\r\n        let room = this.rooms.get(enteredRoomCode);\r\n        if(room){\r\n            if(room.players.length<10){\r\n                room.addPlayer(player);\r\n            }\r\n            return room.players;\r\n        } else {\r\n            console.log(chalk.red(`no room was found for ${enteredCode}`))\r\n        }\r\n    }\r\n\r\n    removePlayerFromRoom(playerId){\r\n        if(this.playersToRooms.size===0 || this.playersToRooms.get(playerId) === undefined){\r\n            return;\r\n        }\r\n        let roomName = this.playersToRooms.get(playerId);\r\n        let playerRoom = this.rooms.get(roomName);\r\n        if(playerRoom){\r\n            \r\n            let remainingPlayers = (playerRoom.players).filter((player)=>{\r\n                return player.playerId !== playerId\r\n            });\r\n    \r\n            playerRoom = {\r\n                ...playerRoom, \r\n                players:remainingPlayers\r\n            }\r\n    \r\n            if(playerRoom.players.length===0){\r\n                this.rooms.delete(roomName);    \r\n            } else {\r\n                this.rooms.set(roomName,playerRoom);\r\n                this.io.in(roomName).emit(updatePlayers.type,remainingPlayers);\r\n            } \r\n        }\r\n    }\r\n\r\n    roomIsFull = function(roomCode) {\r\n        let room = this.rooms.get(roomCode);\r\n        return room.players.length < 10 ? false : true; \r\n    }\r\n\r\n    //returns an updated player array where the callingPlayer's isReady property is flipped\r\n    updatePlayerReadiness = function(callingPlayerId){\r\n        const room = this.rooms.get(this.playersToRooms.get(callingPlayerId))\r\n        const updatedPlayerArray = (room.players||[]).map((player)=>{\r\n            if(player.playerId === callingPlayerId){\r\n                return {...player,readyToStart:!player.readyToStart}\r\n            } else {\r\n                return player;\r\n            }\r\n        })\r\n        return updatedPlayerArray\r\n    }\r\n\r\n    sendUpdatedPlayersToRoom = function(updatedPlayers,enteredRoomCode){\r\n        this.io.in(enteredRoomCode).emit(updatePlayers.type,updatedPlayers);\r\n    }\r\n\r\n    getRoom = function(enteredRoomCode){\r\n        return this.rooms.get(enteredRoomCode);\r\n    }\r\n\r\n    emitAllRoomData = function(enteredRoomCode, socketId){\r\n        //Problem here is that the socket id changes between refreshes\r\n        //Would have to implement a way to cache the player session\r\n    }\r\n\r\n}\r\n\r\n\r\n","import LobbyController from \"./lobbyController\";\r\nimport GameController, {communicateStartOfGame,communicatePlayerCantVote} from \"./gameController\";\r\nimport chalk from 'chalk';\r\n\r\nimport {\r\n    ioCreateRoom,\r\n    ioEnterRoomCode,\r\n    ioPlayerIsReady,\r\n    ioStartGame,\r\n    errorOccured,\r\n    ioPlayerAcknowledged,\r\n    ioUpdateSelectedPlayers,\r\n    ioGetAllData,\r\n    ioCastToVote,\r\n    ioPlayerCastVote\r\n} from '../../client/reducers';\r\n\r\n//Handles socket \r\nexport default class MainController {\r\n    constructor(io){\r\n        this.io = io;\r\n        this.lobbyController = new LobbyController(this.io);\r\n        this.gameController = new GameController(this.io);\r\n\r\n        this.io.on(\"connection\", (socket) => {\r\n\r\n            socket.on(ioCreateRoom.type,()=>{\r\n                socket.join(this.lobbyController.createRoom(socket.id));\r\n            });\r\n    \r\n            socket.on(ioEnterRoomCode.type,(enteredRoomCode)=>{\r\n                 this.lobbyController.joinRoom(enteredRoomCode,socket);\r\n            });\r\n\r\n            socket.on(\"disconnect\",()=>{\r\n               this.lobbyController.playerLeft(socket.id)\r\n            })\r\n\r\n            socket.on(ioPlayerIsReady.type,(payload)=>{\r\n                const updatedPlayers = this.lobbyController.updatePlayerReadiness(payload.playerId);\r\n                this.lobbyController.rooms.get(payload.roomCode).updatePlayers(updatedPlayers);\r\n                this.lobbyController.sendUpdatedPlayersToRoom(updatedPlayers,payload.roomCode);\r\n            });\r\n\r\n            socket.on(ioStartGame.type,(enteredRoomCode)=>{\r\n                const room = this.lobbyController.getRoom(enteredRoomCode)\r\n                if(room){\r\n                    let game = this.gameController.createGame(room);\r\n                    communicateStartOfGame(io,room.roomCode,game);\r\n                } else {\r\n                    console.log(chalk.red('Tried to create a gameController without valid room object passed. Passed to function:'))\r\n                    console.log(chalk.red(room))\r\n                }\r\n            })\r\n\r\n            socket.on(ioGetAllData.type,(enteredRoomCode)=>{\r\n                if(this.lobbyController.checkRoomExists(enteredRoomCode)){\r\n                    this.lobbyController.emitAllRoomData(enteredRoomCode,socket.id)\r\n                } else {\r\n                    io.to(socket.id).emit(errorOccured.type,'No Such Room Exists...');\r\n                }\r\n            })\r\n\r\n            socket.on(ioPlayerAcknowledged.type,(enteredRoomCode)=>{\r\n                this.gameController.setGameWithRoomcode(this.gameController.checkAllPlayersAcknowledged(enteredRoomCode));\r\n            })\r\n\r\n            socket.on(ioUpdateSelectedPlayers.type,(payload)=>{\r\n                this.gameController.sendSelectedPlayersToRoom(payload.roomCode,payload.newSelectedPlayers)\r\n            })\r\n\r\n            socket.on(ioCastToVote.type,(payload)=>{\r\n                this.gameController.updateCastToVote(payload.roomCode,payload.castToVote)\r\n            })\r\n\r\n            socket.on(ioPlayerCastVote.type,(payload)=>{\r\n                this.gameController.setGameWithRoomcode(this.gameController.updatePlayerVote(this.gameController.getGameFromRoomcode(payload.roomCode),payload.selfId,payload.missionPass));\r\n                communicatePlayerCantVote(io,payload.selfId);\r\n                this.gameController.checkAllPlayersVoted(payload.roomCode) ? this.gameController.transitionRound(payload.roomCode) : ()=>{}\r\n            })\r\n        });\r\n    }\r\n}","import Round from '../models/round';\r\nimport { Room } from './room';\r\n\r\nexport class Game {\r\n    constructor(room){\r\n        this.roomCode = room.roomCode;\r\n        this.players = [...room.players];\r\n        this.numberOfPlayers = this.players.length;\r\n        let selectedRoles = this.selectRoles(this.players)\r\n        this.spies = selectedRoles.spies;\r\n        this.knights = selectedRoles.knights;\r\n        this.rounds = [\r\n            new Round(),\r\n            new Round(),\r\n            new Round(),\r\n            new Round(),\r\n            new Round(),\r\n        ];\r\n        this.leader = this.selectMissionLeader(this.players);\r\n        this.showRoles = true;\r\n        this.playersAcknowledgedRole = 0;\r\n        this.castToVote = false;\r\n        this.currentRound = 0;\r\n        this.missionRules = [\r\n            [2,3,2,3,3], //5 players\r\n            [2,3,4,3,4], //6 players\r\n            [2,3,3,4,4], //7 players\r\n            [3,4,4,5,5], //8 players\r\n            [3,4,4,5,5], //9 players\r\n            [3,4,4,5,5] //10 players\r\n        ]\r\n    }\r\n\r\n    //selects 1/3 (rounded up) of players to be spies \r\n    selectRoles = function(players){\r\n        let playersArray = [...players];\r\n        let spies = []\r\n        let knights = []\r\n        //assign the spies\r\n        while(spies.length<Math.ceil((players.length*0.33))){\r\n            let randomIndex = Math.ceil((Math.random()*playersArray.length))-1;\r\n            spies.push(playersArray[randomIndex])\r\n            playersArray.splice(randomIndex,1)\r\n        }\r\n        knights = playersArray; //assign the remaining knights\r\n\r\n        return {spies, knights};\r\n    }\r\n\r\n    selectMissionLeader = function(players){\r\n        let randomIndex = Math.ceil((Math.random()*players.length))-1;\r\n        return players[randomIndex].playerId;\r\n    }\r\n\r\n    // incrementMissionLeader = function(players,previousMissionLeader)\r\n    // if previous leader is number 4, should return 5\r\n    // if previous leader is 5 should return 1\r\n\r\n    incrementMissionLeader = function(players,previousMissionLeader){\r\n        let previousLeaderIndex = players.findIndex(player => player.playerId===previousMissionLeader);\r\n        let leaderIsLast = previousLeaderIndex === players.length-1;\r\n        if(leaderIsLast){\r\n            return players[0].playerId;\r\n        } else {\r\n            return players[previousLeaderIndex+1].playerId;\r\n        }\r\n    }\r\n}","import randomstring from \"randomstring\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nexport class Room {\r\n\r\n    //callingPlayerId: socket.id\r\n    constructor(callingPlayerId){\r\n        this.roomCode = this.generateRoomCode();\r\n        this.players = [];\r\n        this.addPlayer(callingPlayerId)\r\n    }\r\n\r\n    generateRoomCode = function(){\r\n        return randomstring.generate({\r\n            length: 6,\r\n            charset: 'alphanumeric'\r\n        });\r\n    }\r\n\r\n    addPlayer = function(callingPlayerId){\r\n        this.players.push({\r\n            playerId:callingPlayerId,\r\n            selfAlias:`Player${this.players.length+1}`,\r\n            readyToStart: false\r\n        });\r\n    }\r\n\r\n    updatePlayers = function(newPlayerArray){\r\n        this.players = newPlayerArray;\r\n    }\r\n\r\n}","export default class Round {\r\n    constructor(){\r\n        this.playersOnMission= [];\r\n        this.numberOfPass = 0;\r\n        this.numberOfFail = 0;\r\n        this.knightsWon = undefined;\r\n    }\r\n}","import { Server } from 'socket.io';\r\nimport path from 'path';\r\n\r\nexport default (httpServer) => {\r\n\r\n    console.log('Setting up socket.io server...');\r\n    const io = new Server(httpServer,{\r\n        cors: {\r\n            origin: \"*\"\r\n        },\r\n    });\r\n\r\n    return io;\r\n}","module.exports = require(\"@reduxjs/toolkit\");","module.exports = require(\"chalk\");","module.exports = require(\"express\");","module.exports = require(\"randomstring\");","module.exports = require(\"socket.io\");","module.exports = require(\"socket.io-client\");","module.exports = require(\"http\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import express from 'express';\r\nimport socketServer from \"./socket\";\r\nimport {createServer} from 'http';\r\nimport path from 'path';\r\nconst publicPath = path.join(__dirname, '..', 'public','dist');\r\nimport MainController from './controllers/mainController';\r\n\r\nconst expressServer = express();\r\nexpressServer.use(express.static(publicPath));\r\nexpressServer.get('*', (req, res)=>{\r\n    res.sendFile(path.join(publicPath,'index.html'));\r\n})\r\n\r\nconst httpServer = createServer(expressServer);\r\n\r\nconst io = socketServer(httpServer);\r\n\r\nhttpServer.listen(3000, ()=> {\r\n    console.log(`Server running on http://localhost:3000`);\r\n});\r\n\r\nconst mainController = new MainController(io);\r\n\r\n\r\n"],"names":["configureStore","createSlice","combineReducers","PayloadAction","initialGameState","players","spies","knights","rounds","leader","showRoles","allAcknowledged","selectedPlayers","currentRound","castToVote","allowToVote","showWinner","knightsWon","initialRoomState","selfId","selfAlias","roomCode","error","gameStarted","roomsSlice","name","initialState","reducers","ioCreateRoom","state","action","roomCreated","payload","ioEnterRoomCode","updatePlayers","updateSelf","errorOccured","ioPlayerIsReady","ioStartGame","navigateToGame","returnAllRoomData","gameSlice","updateGameState","ioGetAllData","ioPlayerAcknowledged","allPlayersAcknowledged","ioUpdateSelectedPlayers","updateSelectedPlayers","ioCastToVote","updateCastToVote","ioPlayerCastVote","updateAllowToVote","hideShowWinner","resetGameState","newLeader","rootReducer","room","reducer","game","actions","navigateToLobby","Game","Round","io","GameController","games","set","get","playersAcknowledgedRole","length","emit","type","gameToUpdate","missionPass","numberOfPass","numberOfFail","playerName","getNameFromId","playersOnMission","push","getGameFromRoomcode","missionRules","checkIfKnightsWin","storeWinner","incrementRound","setTimeout","knightsWin","updatedGame","setGameWithRoomcode","incrementMissionLeader","providedSelfId","filter","player","playerId","Map","communicateStartOfGame","toRoom","communicatePlayerCantVote","to","Room","chalk","LobbyController","newRoom","addToRoomMap","addPlayerToRoomMap","formattedRoom","enteredRoomCode","socket","checkRoomExists","roomIsFull","join","rooms","id","addPlayerToRoom","formattedPlayer","removePlayerFromRoom","console","log","red","playersToRooms","playersArray","callingPlayerId","updatedPlayerArray","map","readyToStart","updatedPlayers","socketId","enteredCode","has","addPlayer","size","undefined","roomName","playerRoom","remainingPlayers","MainController","lobbyController","gameController","on","createRoom","joinRoom","playerLeft","updatePlayerReadiness","sendUpdatedPlayersToRoom","getRoom","createGame","emitAllRoomData","checkAllPlayersAcknowledged","sendSelectedPlayersToRoom","newSelectedPlayers","updatePlayerVote","checkAllPlayersVoted","transitionRound","Math","ceil","randomIndex","random","splice","previousMissionLeader","previousLeaderIndex","findIndex","leaderIsLast","numberOfPlayers","selectedRoles","selectRoles","selectMissionLeader","randomstring","generate","charset","newPlayerArray","generateRoomCode","Server","path","httpServer","cors","origin","express","socketServer","createServer","publicPath","__dirname","expressServer","use","req","res","sendFile","listen","mainController"],"sourceRoot":""}