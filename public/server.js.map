{"version":3,"file":"server.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA,iEAAe,UAACE,UAAD,EAAgB;AAE3BC,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACA,MAAMC,EAAE,GAAG,IAAIL,6CAAJ,CAAWE,UAAX,EAAsB;AAC7BI,IAAAA,IAAI,EAAE;AACFC,MAAAA,MAAM,EAAE;AADN;AADuB,GAAtB,CAAX;AAMA,SAAOF,EAAP;AACH,CAVD;;;;;;;;;;ACHA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA,IAAMM,UAAU,GAAGV,gDAAA,CAAUY,SAAV,EAAqB,IAArB,EAA2B,QAA3B,CAAnB;AAEA,IAAMC,aAAa,GAAGN,8CAAO,EAA7B;AACAM,aAAa,CAACC,GAAd,CAAkBP,wDAAA,CAAeG,UAAf,CAAlB;AACAG,aAAa,CAACE,GAAd,CAAkB,GAAlB,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAY;AAC/BA,EAAAA,GAAG,CAACC,QAAJ,CAAalB,gDAAA,CAAUU,UAAV,EAAqB,YAArB,CAAb;AACH,CAFD;AAIA,IAAMT,UAAU,GAAGQ,kDAAY,CAACI,aAAD,CAA/B;AAEA,IAAMT,EAAE,GAAGI,mDAAY,CAACP,UAAD,CAAvB;AAEAA,UAAU,CAACkB,MAAX,CAAkB,IAAlB,EAAwB,YAAK;AACzBjB,EAAAA,OAAO,CAACC,GAAR;AACH,CAFD,E","sources":["webpack://spyspy/./server/socket.js","webpack://spyspy/external commonjs \"express\"","webpack://spyspy/external commonjs \"socket.io\"","webpack://spyspy/external node-commonjs \"http\"","webpack://spyspy/external node-commonjs \"path\"","webpack://spyspy/webpack/bootstrap","webpack://spyspy/webpack/runtime/compat get default export","webpack://spyspy/webpack/runtime/define property getters","webpack://spyspy/webpack/runtime/hasOwnProperty shorthand","webpack://spyspy/webpack/runtime/make namespace object","webpack://spyspy/./server/server.js"],"sourcesContent":["import { Server } from 'socket.io';\r\nimport path from 'path';\r\n\r\nexport default (httpServer) => {\r\n\r\n    console.log('Setting up socket.io server...');\r\n    const io = new Server(httpServer,{\r\n        cors: {\r\n            origin: \"*\"\r\n        },\r\n    });\r\n\r\n    return io;\r\n}","module.exports = require(\"express\");","module.exports = require(\"socket.io\");","module.exports = require(\"http\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import express from 'express';\r\nimport socketServer from \"./socket\";\r\nimport {createServer} from 'http';\r\nimport path from 'path';\r\nconst publicPath = path.join(__dirname, '..', 'public');\r\n\r\nconst expressServer = express();\r\nexpressServer.use(express.static(publicPath));\r\nexpressServer.get('*', (req, res)=>{\r\n    res.sendFile(path.join(publicPath,'index.html'));\r\n})\r\n\r\nconst httpServer = createServer(expressServer);\r\n\r\nconst io = socketServer(httpServer);\r\n\r\nhttpServer.listen(3000, ()=> {\r\n    console.log(`Server running on http://localhost:3000`);\r\n});\r\n\r\n"],"names":["Server","path","httpServer","console","log","io","cors","origin","express","socketServer","createServer","publicPath","join","__dirname","expressServer","use","get","req","res","sendFile","listen"],"sourceRoot":""}